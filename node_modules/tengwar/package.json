{
  "name": "tengwar",
  "version": "0.1.2",
  "homepage": "http://3rin.gs/tengwar",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal/"
  },
  "bugs": {
    "url": "http://github.com/kriskowal/tengwarjs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/kriskowal/tengwarjs/raw/master/LICENSE"
    },
    {
      "url": "http://github.com/kriskowal/tengwarjs/raw/master/tengwar-annatar/tngandoc.pdf"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kriskowal/tengwarjs.git"
  },
  "devDependencies": {
    "jasmine-node": "1.0.x"
  },
  "scripts": {
    "test": "jasmine-node spec"
  },
  "readme": "\nThis is a Tengwar transcriber suitable for transcribing Sindarin\nElvish from a phonetic encoding of the Latin alphabet, to the General\nUse mode of the Tengwar.  It is written in JavaScript and is suitable\nfor use as:\n\n-   A plain script in a web page, `vanilla-tengwar.min.js`.\n-   A CommonJS module as used by Node or Mr, with the NPM package name\n    ``tengwar``.\n\nUsing the Script\n================\n\nThe script searches the document for elements with the `tengwar` class.\nThe class must also include either `parmaite` or `annatar` to select the\nrendering font.  This is not merely for the purpose of applying the\nappropriate web font, but also instructs the script on which bindings to\nuse for kerning tehtar.  The body of a `tengwar` class must be rendered\nwith the included Tengar Annatar variant webfont or Tengwar Parmaitë\nusing the included `tengwar-annatar.css` or `tengwar-parmaite.css`.\n\nIf the element has a `data-tengwar` property, that property is expected\nto contain phonetic letters from the latin alphabet and gets transcribed\ninto bindings for the Tengwar Anntar font in the General Use mode,\npopular for Sindarin and English.  The script populates the element's\ninner HTML with the font bindings, rendering the desired tengwar text\nvisible.\n\n    class=\"tengwar annatar\"\n\nIf the element has a `data-mode` property, the latin letters\nare instead transcribed into key bindings through the\nClassical mode, popular for Quenya, or the mode of Beleriand.  Various\noptions can also be applied.\n\n    data-mode=\"general-use no-ach-laut reverse-curls\"\n    data-mode=\"classical reverse-curls\"\n    data-mode=\"beleriand\"\n    data-mode=\"general-use black-speech\"\n\nIf the element has a `data-encoded` property, the value is expected to\nbe a description of the tengwar and tehtar to display like\n`romen:a;ungwe:a;romen:o;numen` for \"Aragorn\" in the General Use mode.\n\n    data-encoded=\"romen:a;ungwe:a;romen:o;numen\"\n\nOf course, a page can bypass the whole automated transcription process\nby statically populating the element with the desired key bindings and\nusing neither of these data properties.\n\nThe script checks for modern browser features and stops if the necessary\nfeatures are not present.\n\nUsing the Modules\n=================\n\n-   `tengwar/general-use` transcribes phonetic latin letters, as Tolkien\n    wrote it, into Tengwar Notation in the General Use mode, suitable\n    for Sindarin and many other languages.\n    -   `transcribe(text, options)` to key bindings for the font.\n        Tengwar Annatar by default.\n    -   `encode(text, options)` to Tengwar Notation\n    -   `parse(text, options)` to Tengwar Object Notation\n    -   `makeOptions(options)`\n        -   `font` defaults to the TengwarAnnatar module.\n        -   `block` whether to include HTML tags for paragraphs and line\n            breaks.\n        -   `plain` whether to exclude all HTML from the output,\n            making it suitable for plain text..\n        -   `blackSpeech`: In the Black Speech of the ring inscription,\n            the \"o\" and \"u\" curls are reversed, medial \"r\" is ore before\n            consonants in addition to final \"r\", and \"sh\" and \"gh\" used\n            extended tengwar.  This implies `reverseCurls` and\n            `medialOre`.\n        -   `doubleNasalsWithTildeBelow`: Many tengwa can be doubled in\n            General Use mode by placing a tilde above the tengwa, and\n            many tengwa can be prefixed with the sound of the\n            corresponding nasal by putting a tilde below the tengwa.\n            Tengwar that represent nasal sounds have the special\n            distinction that either rule might apply in order to double\n            their value.\n            -   `false`: by default, a tilde above doubles a nasal\n            -   `true`: a tilde below doubles a nasal\n        -   `reverseCurls`: In the Black Speech of the ring inscription,\n            among other samples, the \"o\" and \"u\" tehtar are reversed.\n            -   `false`: by default, the \"o\" tehta curls forward, and\n                \"u\" backward.\n            -   `true`: \"o\" curls backward, \"u\" forward.\n        -   `swapDotSlash`\n            -   `false`: by default, \"i\" is a dot and \"e\" is a slash.\n            -   `true`: \"i\" is a slash, \"e\" is a dot.\n        -   `noAchLaut`\n            -   `false`: by default, \"ch\" is transcribed as ach-laut,\n                the \"ch\" as in \"Bach\".  \"cc\" is transcribed as \"ch\" as\n                in \"chew\".\n            -   `true`: \"ch\" is interpreted as the \"ch\" as in \"chew\".\n        -   `isHook`\n            -   `false`: by default, \"is\" is silme-nuquerna with an I\n                tehta.\n            -   `true`: \"is\" is a short carrier with an I tehta and S\n                hook.\n\n-   `tengwar/classical` transcribes phonetic latin letters into Tengwar\n    Notation in the Classical mode, most commonly used for Quenya.\n    -   `transcribe(text, options)` to key bindings for the font.\n        Tengwar Annatar by default.\n    -   `encode(text, options)` to Tengwar Notation\n    -   `parse(text, options)` to Tengwar Object Notation\n    -   `makeOptions(options)`\n        -   `font` defaults to the TengwarAnnatar module.\n        -   `block` whether to include HTML tags for paragraphs and line\n            breaks.\n        -   `plain` whether to exclude all HTML from the output,\n            making it suitable for plain text..\n        -   `viyla`: In the earlier forms of the mode, the tengwa\n            \"vilya\" represented the sound of the letter V.  The tengwa\n            \"vala\" eventually replaced its role and \"vilya\" was renamed\n            \"wilya\", and used for the sound of W, consonantal U.\n            -   `false`: by default \"wilya\" serves for W and \"vala\" for\n                V.\n            -   `true`: \"vilya\" serves for V, and W is interpreted as\n                the vowel U.\n        -   `reverseCurls`: In the Black Speech of the ring inscription,\n            among other samples, the \"o\" and \"u\" tehtar are reversed.\n            -   `false`: by default, the \"o\" tehta curls forward, and\n                \"u\" backward.\n            -   `true`: \"o\" curls backward, \"u\" forward.\n        -   `iuRising`: In the Third Age, IU is a rising diphthong,\n            meaning that the stress is on the second sound.  Whether to\n            represent a rising diphthong in the same fashion as other\n            diphthongs is a matter of conjecture.\n            -   `false`: by default, IU is rendered as the I tehta over\n                \"ure\", the U tehta.\n            -   `true`: IU is rendered as the tengwa \"anna\" with a Y\n                tehta below, and a U tehta above.\n        -   `classical`: Before the Third Age (as defined by the\n            Namarië) transcribers dealt with R and H differently.  R can\n            be rendered as either \"romen\" or \"ore\", but the rules\n            differ.  In the classical period, R is interpreted as \"ore\"\n            only when it appears between vowel sounds.  In the Third\n            Age, R is interpreted as \"ore\" before consonants and at the\n            end of words.  The treatment of H is more complex and I have\n            only given it a rough draft.\n            -   `false`: by default, we transcribe in the pattern of the\n                Namarië poem, where \"ore\" is used finally and before\n                consonants.\n                -   H is interpreted as \"hyarmen\".\n                -   HY is interpreted as \"hyarmen\" with the underposed\n                    \"y\" tehta.\n                -   HW and WH are interpreted as \"hwesta\".\n                -   CH is interpreted as \"harma\".\n                -   HT is interpreted as \"harma\" followed by \"tinco\".\n                    Therby, HT implies CHT.\n                -   HL is interpreted as \"halla\" followed by \"lambe\".\n                -   HR is interpreted as \"halla\" followed by \"romen\".\n            -   `true`: \"ore\" appears only between vowels.  The\n                treatment of \"H\" depends on whether \"harma\" has been\n                introduced yet.\n        -   `harma`: In the Classical period, \"hyarmen\" implied the\n            following-Y.  Then \"hyarmen\" served as breath-H medially,\n            and \"harma\" served as breath-H initially and was renamed\n            \"aha\" in that role.\n            -   `false`: by default\n                -   H is interpreted as \"halla\" in all positions\n                -   HY is interpreted as \"hyarmen\" with underposed \"y\".\n                -   HT still implies CHT so treated as \"harma\" as above.\n                -   CH, HL, HR, and HW (and WH) are not affected.\n            -   `true`: the oldest form of the mode\n                -   H initial is interpreted as \"harma\"\n                -   H medial is interpreted as \"hyarmen\"\n                -   HY is interpreted as \"hyarmen\"\n                -   HT still implies CHT so treated as \"harma\" as above.\n                -   CH, HL, HR, and HW (and WH) are not affected.\n\n-   `tengwar/beleriand`: transcribes phonetic latin letters into Tengwar\n    Notation in the mode of Beleriand, which is suitable for Sindarin\n    and uses full tengwar for most vowels, instead of tehtar.\n    -   `transcribe(text, options)` to key bindings for the font.\n        Tengwar Annatar by default.\n    -   `encode(text, options)` to Tengwar Notation\n    -   `parse(text, options)` to Tengwar Object Notation\n    -   `makeOptions(options)`\n        -   `font` defaults to the TengwarAnnatar module.\n        -   `block` whether to include HTML tags for paragraphs and line\n            breaks.\n        -   `plain` whether to exclude all HTML from the output,\n            making it suitable for plain text..\n\n-   `tengwar/tengwar-annatar`: Translates Tengwar Object Notation into\n    key bindings for Johan Winge’s Tengwar Annatar font.  Provides the\n    `makeColumn` primitive which is aware of how a column of tengwar and\n    tehtar can transform to accommodate additional tehtar with this\n    font.\n    -   `transcribe(tengwarObjectNotation, options)`: to Tengwar Annatar key\n        bindings\n        -   `plain`: plain text, no markup\n        -   `block`: block markup, with paragraph and line break tags\n    -   `makeColumn(tengwa, above, below)`\n        -   `canAddAbove()`\n        -   `addAbove(tehta)`\n        -   `canAddBelow()`\n        -   `addBelow(below)`\n        -   `addFollowing(following)`\n        -   `addTildeAbove()`\n        -   `addTildeBelow()`\n        -   `addError(error)`\n-   `notation`\n    -   `encode(tengwarObjectNotation)`: to Tengwar Notation\n    -   `decode(tengwarNotation, makeColumn)`: to Tengwar Object\n        Notation.\n    -   `decodeWord(tengwarNotation makeColumn)`: to Tengwar Object\n        Notation for just one word (no nested arrays).\n\n## Tengwar Notation\n\nTengwar Notation is useful for succinctly representing the first stage\nof transcription, before translation to key bindings for a particular\nfont.  The notation uses the names of the tengwa followed by a list of\ntehtar in a consistent order:\n\n-   *column* =\n    -   *tengwa*\n    -   \":\" if there are any following tehtar\n    -   *tehtar* delimited by \",\"\n        -   *tehta above* if applicable\n        -   *tehta below* if applicable\n        -   *following tehta* if applicable\n        -   \"tilde-above\" if applicable\n        -   \"tilde-below\" if applicable\n-   *word* = *column* delimited by \";\"\n-   *sentence* = *word* delimited by \" \"\n-   *stanza* = *sentence* delimited by \"\\n\"\n-   *paragraph* = *stanza* delimited by \"\\n\\n\"\n-   *section* = *paragraph* delimited by \"\\n\\n\\n+\"\n\nThe notation is useful for manually describing a transcription, either\nto override the transcriber, or for testing a transcriber.\n\n## Tengwar Object Notation\n\nTengwar Object Notation represents a word of Tengwar as an array of\nobjects.  Each object has properties,\n\n-   `tengwa` the name of one of the tengwar or punctuation mark in my\n    obtuse pidgin of punctuation names: \"comma\", \"full-stop\",\n    \"exclamation-point\", \"question-mark\", \"open-paren\", \"close-paren\",\n    \"flourish-left\", or \"flourish-right\".  \"vilya\" is always represented\n    as \"wilya\" and \"aha\" is always \"harma\", regardless of what name is\n    appropriate for the mode.\n-   `above` may be a tehta including \"a\", \"e\", \"i\", \"o\", \"u\", \"ó\", or\n    \"ú\".  Note that \"á\", \"é\", and \"í\" are not supported diacritics.\n-   `below` may be \"y\".\n-   `following` a tehta like \"s\", \"s-inverse\", \"s-extended\", or\n    \"s-flourish\".\n-   `tilde-above` boolean.\n-   `tilde-below` boolean.\n\nWords are wrapped in an array to make a sentence.  Sentences are wrapped\nto make paragraphs.  Paragraphs are wrapped to make sections.  Somehow\nI’ve neglected stanzas within paragraphs.  This will be remedied in a\nfuture version, and the nodes will probably be revised to be more\nsophisticated than merely nested arrays.\n\nA font module must have a `makeColumn` function that produces objects\nwith these properties and the attendant methods as described for the\nTengwar Annatar module above.\n\nThe Legacy Module\n=================\n\nThe `tengwar` module includes:\n\n-   ``transcribe(latin)`` returns a string of characters encoded for the\n    custom Tengwar Annatar font included.  Paragraphs and sections are\n    encoded with new lines.\n-   ``transcribeHtml(latin)`` returns a string of HTML.  Stanzas,\n    paragraphs, and sections are encoded with HTML tags, ``br`` and\n    ``p``.\n-   ``annotate(latin)`` returns a multi-dimensional array that describes\n    the phoneme produced by each character and diacritic of the\n    corresponding elvish.\n-   ``annotateHtml(latin)`` returns an HTML table of the annotation\n    data.\n\nWhen used as a script, the API is planted in a ``tengwar`` global\nvariable.\n\nIf used as a jQuery plugin, you can use the \"tengwar\" method to\ntranscribe the contents of selected tags and add the \"tengwar\" class\nto successfully transcribed tags.\n\n    $(\".transcribe-tengwar\").tengwar();\n\nBe sure to use the included web font, derrived from Johan Winge's\nTengwar Annatar.  It is customized for this web-deployed transcriber.\n\nIf used as a Node module, the ``tengwar`` module exports the API.\n\n",
  "readmeFilename": "README.md",
  "description": "This is a Tengwar transcriber suitable for transcribing Sindarin Elvish from a phonetic encoding of the Latin alphabet, to the General Use mode of the Tengwar.  It is written in JavaScript and is suitable for use as:",
  "_id": "tengwar@0.1.2",
  "dist": {
    "shasum": "28d09ba6674424a639a2ae59782cbd5cfd281046"
  },
  "_from": "tengwar@",
  "_resolved": "https://registry.npmjs.org/tengwar/-/tengwar-0.1.2.tgz"
}
